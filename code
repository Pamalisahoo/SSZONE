class TranspositionCipher:
    def __init__(self, key):
        """
        Initialize the Transposition Cipher with the given key.
        The key should be a list of unique integers representing the column numbers to write to in each pass.
        """
        if not all(isinstance(i, int) for i in key) or not all(0 < i < len(key) for i in key):
            raise ValueError("Key must be a list of unique integers between 1 and the length of the key.")
        self.key = key

    def encrypt(self, message):
        """
        Encrypt a plaintext message using the Transposition Cipher.
        :param message: The plaintext message as a string.
        :return: The ciphertext as a string.
        """
        if not all(ord(c) < 128 for c in message):
            raise ValueError("Message must be a string of ASCII characters.")
        message = message.replace(" ", "").upper()
        length = len(message)
        num_rows = len(self.key)
        num_cols = length // num_rows + (length % num_rows > 0)
        ciphertext = [""] * num_cols
        for i in range(num_rows):
            for j in range(length):
                col = self.key[i] - 1
                ciphertext[col] += message[i * num_cols + j]
        return "".join(ciphertext)

# Example usage:
key = [1, 3, 2]
cipher = TranspositionCipher(key)
plaintext = "ATTACKATDAWN"
ciphertext = cipher.encrypt(plaintext)
print(ciphertext)  # Output: "TGTCAKAATAAD"
